name: Build library

on:
  push:
    tags:
      - 'v*'

env:
  LLAMACPP_VERSION: b5261
  CUDA: 12.2.0

jobs:
  linux-build:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        include:
          - architecture: 'noavx'
            
    steps:
        - id: setup_libs_linux
          name: Dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y build-essential cmake zip libssl-dev git libcurl4-openssl-dev curl


        - id: checkout
          name: Clone
          uses: actions/checkout@v4
          with:
            submodules: recursive

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            mkdir -p build/licenses build/libs
        
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            for f in ../patches/*;do
              git apply $f
            done
        
            if [[ "${{ matrix.architecture }}" == "tinyblas" ]]; then
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.architecture }}" == "tinyblas" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash


        - id: setup_vulkan_linux
          if: matrix.architecture == 'vulkan'
          name: Dependencies Vulcan
          run: |
            wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
            sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list https://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
            sudo apt-get update -y
            sudo apt-get install -y build-essential vulkan-sdk
            cp /lib/x86_64-linux-gnu/libvulkan.so.1 build/libs/

        - id: setup_cuda_linux
          if: matrix.architecture == 'cublas' || matrix.architecture == 'tinyblas'
          uses: Jimver/cuda-toolkit@v0.2.15
          with:
            cuda: ${{ env.CUDA }}
            linux-local-args: '["--toolkit"]'
            method: network

        - id: link_cuda_linux
          if: matrix.architecture == 'cublas' || matrix.architecture == 'tinyblas'
          name: Link Cuda
          run: |
            ln -s ${{ env.CUDA_PATH }} ${{ github.workspace }}/build/cuda
            echo "CUDAToolkit_ROOT=$GITHUB_WORKSPACE/build/cuda" >> $GITHUB_ENV
            echo "LD_LIBRARY_PATH=''" >> $GITHUB_ENV


        - id: cpu-cores
          name: Get number of CPU cores
          uses: SimenB/github-actions-cpu-cores@v2

        - id: cmake_build
          name: Build
          run: |
            cd build
            cmake .. -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs -DARCHITECTURE=${{ matrix.architecture }} ${{ matrix.cmake_vars }}
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}

        - id: test_build_unix
          if: matrix.architecture != 'avx512' && !contains(matrix.architecture, 'blas')
          name: Test
          run: |
            cd build/libs
            curl -L -o model.gguf https://huggingface.co/afrideva/smol_llama-220M-openhermes-GGUF/resolve/main/smol_llama-220m-openhermes.q4_k_m.gguf?download=true
            ./llamalib_testS -m model.gguf -np 1 --log-disable
            rm model.gguf


        - id: pack_artifacts_unix
          name: Pack artifacts
          run: |
            UPLOAD_NAME=$RUNNER_OS-${{ matrix.architecture }}.zip
            echo "UPLOAD_NAME=$UPLOAD_NAME" >> $GITHUB_ENV
            rm -f build/libs/llamalib_testS
            zip -j $UPLOAD_NAME build/licenses/* build/libs/*

        - id: upload
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.UPLOAD_NAME }}
            path: ${{ env.UPLOAD_NAME }}

