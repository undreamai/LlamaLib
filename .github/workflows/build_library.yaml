name: Build library

on:
  push:
    tags:
      - 'v*'

env:
  LLAMACPP_VERSION: b5261
  CUDA: 12.2.0

jobs:
  ################################ ArchChecker ################################

  archchecker_linux_build:
    name: Build ArchChecker Linux
    runs-on: ubuntu-22.04

    env:
        UPLOAD_NAME: linux-archchecker
        UPLOAD_PATH: archchecker/build/libarchchecker.so

    steps:
        - id: checkout
          name: Clone
          uses: actions/checkout@v4
          with:
            submodules: recursive

        - id: build_archchecker
          name: Build
          run: |
            mkdir archchecker/build
            cd archchecker/build
            cmake ..
            cmake --build . --config Release -j $(nproc)

        - id: upload_archchecker
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.UPLOAD_NAME }}
            path: ${{ env.UPLOAD_PATH }}


  archchecker_windows_build:
    name: Build ArchChecker Windows
    runs-on: windows-2019

    env:
        UPLOAD_NAME: windows-archchecker
        UPLOAD_PATH: archchecker/build/Release/archchecker.dll

    steps:
        - id: checkout
          name: Clone
          uses: actions/checkout@v4
          with:
            submodules: recursive

        - id: build_archchecker
          name: Build
          run: |
            mkdir archchecker/build
            cd archchecker/build
            cmake ..
            cmake --build . --config Release -j $(nproc)

        - id: upload_archchecker
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.UPLOAD_NAME }}
            path: ${{ env.UPLOAD_PATH }}



  ################################ Linux ################################

  linux-build:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        include:
          - arch: linux_noavx
          - arch: linux_avx2
          - arch: linux_avx
          - arch: linux_avx512
          - arch: linux_vulkan
          - arch: linux_tinyblas
          - arch: linux_cublas
            
    steps:
        - id: setup_libs_linux
          name: Dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y build-essential cmake zip libssl-dev git libcurl4-openssl-dev curl


        - id: checkout
          name: Clone
          uses: actions/checkout@v4
          with:
            submodules: recursive

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            mkdir -p build/licenses build/libs
        
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            for f in ../patches/*;do
              git apply $f
            done
        
            if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
              echo "tinyblas"
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash


        - id: setup_vulkan_linux
          if: matrix.arch == 'linux_vulkan'
          name: Dependencies Vulcan
          run: |
            wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
            sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list https://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
            sudo apt-get update -y
            sudo apt-get install -y build-essential vulkan-sdk
            cp /lib/x86_64-linux-gnu/libvulkan.so.1 build/libs/

        - id: setup_cuda_linux
          if: matrix.arch == 'linux_cublas' || matrix.arch == 'linux_tinyblas'
          uses: Jimver/cuda-toolkit@v0.2.15
          with:
            cuda: ${{ env.CUDA }}
            linux-local-args: '["--toolkit"]'
            method: network

        - id: link_cuda_linux
          if: matrix.arch == 'linux_cublas' || matrix.arch == 'linux_tinyblas'
          name: Link Cuda
          run: |
            ln -s ${{ env.CUDA_PATH }} ${{ github.workspace }}/build/cuda
            echo "CUDAToolkit_ROOT=$GITHUB_WORKSPACE/build/cuda" >> $GITHUB_ENV
            echo "LD_LIBRARY_PATH=''" >> $GITHUB_ENV


        - id: cpu-cores
          name: Get number of CPU cores
          uses: SimenB/github-actions-cpu-cores@v2

        - id: cmake_build
          name: Build
          run: |
            cd build
            cmake .. -DARCHITECTURE=${{ matrix.arch }} -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs ${{ matrix.cmake_vars }}
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}

        - id: test_build_linux
          if: matrix.arch == 'linux_noavx' || matrix.arch == 'linux_avx2'
          name: Test
          run: |
            cd build/libs
            curl -L -o model.gguf https://huggingface.co/afrideva/smol_llama-220M-openhermes-GGUF/resolve/main/smol_llama-220m-openhermes.q4_k_m.gguf?download=true
            ./llamalib_tests -m model.gguf -np 1 --log-disable
            rm model.gguf


        - id: pack_artifacts_unix
          name: Pack artifacts
          run: |
            rm -f build/libs/llamalib_tests
            zip -j ${{ matrix.arch }}.zip build/licenses/* build/libs/*

        - id: upload_llamalib
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ matrix.arch }}.zip
            path: ${{ matrix.arch }}.zip


  linux-hip:
    runs-on: ubuntu-22.04
    container: rocm/dev-ubuntu-22.04:5.5

    strategy:
      matrix:
        include:
          - arch: linux_hip

    steps:
        - id: setup_libs_linux
          name: Dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y build-essential cmake zip libssl-dev git libcurl4-openssl-dev curl


        - id: checkout
          name: Clone
          uses: actions/checkout@v4
          with:
            submodules: recursive

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            mkdir -p build/licenses build/libs
        
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            for f in ../patches/*;do
              git apply $f
            done
        
            if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
              echo "tinyblas"
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash


        - id: setup_hip_linux
          name: Dependencies
          run: |
            sudo apt-get install -y rocblas-dev hipblas-dev


        - id: set_build_params_hip_linux
          name: Set build parameters
          run: |
            echo "CMAKE_HIP_COMPILER=$(hipconfig -l)/clang" >> $GITHUB_ENV

        - id: cmake_build
          name: Build
          run: |
            cd build
            cmake .. -DARCHITECTURE=${{ matrix.arch }} -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs ${{ matrix.cmake_vars }}
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}


        - id: pack_artifacts_unix
          name: Pack artifacts
          run: |
            rm -f build/libs/llamalib_tests
            zip -j ${{ matrix.arch }}.zip build/licenses/* build/libs/*

        - id: upload_llamalib
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ matrix.arch }}.zip
            path: ${{ matrix.arch }}.zip


################################ macOS ################################

  macOS-arm64-build:
    runs-on: macos-14

    strategy:
      matrix:
        include:
          - arch: macos_arm64_acc
          - arch: macos_arm64_no_acc

    steps:
        - continue-on-error: true
          id: setup_libs_macos
          name: Dependencies
          run: |
            echo "Architecture: $(uname -m)"
            echo "Operating System: $(uname -s)"
            brew update


        - id: checkout
          name: Clone
          uses: actions/checkout@v4
          with:
            submodules: recursive

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            mkdir -p build/licenses build/libs
        
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            for f in ../patches/*;do
              git apply $f
            done
        
            if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
              echo "tinyblas"
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash


        - id: cpu-cores
          name: Get number of CPU cores
          uses: SimenB/github-actions-cpu-cores@v2

        - id: cmake_build
          name: Build
          run: |
            cd build
            cmake .. -DARCHITECTURE=${{ matrix.arch }} -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs ${{ matrix.cmake_vars }}
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}

        - id: test_build_macos
          name: Test
          run: |
            cd build/libs
            templib=libllamalib_`echo ${{ matrix.arch }}|sed -i.bak 's:arm64_::g'|sed -i.bak 's:x64_::g'`.dylib
            ln -s libllamalib_${{ matrix.arch }}.dylib $templib
            curl -L -o model.gguf https://huggingface.co/afrideva/smol_llama-220M-openhermes-GGUF/resolve/main/smol_llama-220m-openhermes.q4_k_m.gguf?download=true
            ./llamalib_tests -m model.gguf -np 1 --log-disable
            rm model.gguf $templib


        - id: pack_artifacts_unix
          name: Pack artifacts
          run: |
            rm -f build/libs/llamalib_tests
            zip -j ${{ matrix.arch }}.zip build/licenses/* build/libs/*

        - id: upload_llamalib
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ matrix.arch }}.zip
            path: ${{ matrix.arch }}.zip


  macOS-x64-build:
    runs-on: macos-13

    strategy:
      matrix:
        include:
          - arch: macos_x64_acc
          - arch: macos_x64_no_acc

    steps:
        - continue-on-error: true
          id: setup_libs_macos
          name: Dependencies
          run: |
            echo "Architecture: $(uname -m)"
            echo "Operating System: $(uname -s)"
            brew update


        - id: checkout
          name: Clone
          uses: actions/checkout@v4
          with:
            submodules: recursive

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            mkdir -p build/licenses build/libs
        
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            for f in ../patches/*;do
              git apply $f
            done
        
            if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
              echo "tinyblas"
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash


        - id: cpu-cores
          name: Get number of CPU cores
          uses: SimenB/github-actions-cpu-cores@v2

        - id: cmake_build
          name: Build
          run: |
            cd build
            cmake .. -DARCHITECTURE=${{ matrix.arch }} -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs ${{ matrix.cmake_vars }}
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}

        - id: test_build_macos
          name: Test
          run: |
            cd build/libs
            templib=libllamalib_`echo ${{ matrix.arch }}|sed -i.bak 's:arm64_::g'|sed -i.bak 's:x64_::g'`.dylib
            ln -s libllamalib_${{ matrix.arch }}.dylib $templib
            curl -L -o model.gguf https://huggingface.co/afrideva/smol_llama-220M-openhermes-GGUF/resolve/main/smol_llama-220m-openhermes.q4_k_m.gguf?download=true
            ./llamalib_tests -m model.gguf -np 1 --log-disable
            rm model.gguf $templib


        - id: pack_artifacts_unix
          name: Pack artifacts
          run: |
            rm -f build/libs/llamalib_tests
            zip -j ${{ matrix.arch }}.zip build/licenses/* build/libs/*

        - id: upload_llamalib
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ matrix.arch }}.zip
            path: ${{ matrix.arch }}.zip



################################ Windows ################################

  windows-build:
    runs-on: windows-2019

    env:
      VULKAN_VERSION: 1.3.261.1
      PLATFORM: windows

    strategy:
      matrix:
        include:
          - arch: windows_noavx
          - arch: windows_avx2
          - arch: windows_avx
          - arch: windows_avx512
          - arch: windows_vulkan
          - arch: windows_tinyblas
          - arch: windows_cublas

    steps:
        - id: checkout
          name: Clone
          uses: actions/checkout@v4
          with:
            submodules: recursive

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            mkdir -p build/licenses build/libs
        
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            for f in ../patches/*;do
              git apply $f
            done
        
            if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
              echo "tinyblas"
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash


        - id: setup_vulcan_windows
          if: matrix.arch == 'windows_vulkan'
          name: Install Vulkan SDK
          run: |
            curl.exe -o $env:RUNNER_TEMP/VulkanSDK-Installer.exe -L "https://sdk.lunarg.com/sdk/download/${env:VULKAN_VERSION}/windows/VulkanSDK-${env:VULKAN_VERSION}-Installer.exe"
            & "$env:RUNNER_TEMP\VulkanSDK-Installer.exe" --accept-licenses --default-answer --confirm-command install
            Add-Content $env:GITHUB_ENV "VULKAN_SDK=C:\VulkanSDK\${env:VULKAN_VERSION}"
            Add-Content $env:GITHUB_PATH "C:\VulkanSDK\${env:VULKAN_VERSION}\bin"
            curl.exe -o $env:RUNNER_TEMP/VulkanRT-Components.zip -L "https://sdk.lunarg.com/sdk/download/1.3.283.0/windows/VulkanRT-1.3.283.0-Components.zip"
            7z x "-o${env:RUNNER_TEMP}" $env:RUNNER_TEMP/VulkanRT-Components.zip
            mkdir .\build\libs\Release
            cp ${env:RUNNER_TEMP}/VulkanRT*\x64\vulkan-1.dll .\build\libs\Release

        - id: setup_openssl_windows
          name: Install OpenSSL
          run: |
            choco install openssl --no-progress
            $OPENSSL_ROOT_DIR = 'C:\Program Files\OpenSSL'
            Copy-Item $OPENSSL_ROOT_DIR\lib\VC\x64\MD\*.lib $OPENSSL_ROOT_DIR\lib\
            Copy-Item $OPENSSL_ROOT_DIR\lib\libcrypto_static.lib $OPENSSL_ROOT_DIR\lib\libcrypto.a
            Copy-Item $OPENSSL_ROOT_DIR\lib\libssl_static.lib $OPENSSL_ROOT_DIR\lib\libssl.a
            Add-Content $env:GITHUB_ENV "OPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR"

        - id: setup_cuda_windows
          if: matrix.arch == 'windows_cublas' || matrix.arch == 'windows_tinyblas'
          uses: Jimver/cuda-toolkit@v0.2.15
          with:
            cuda: ${{ env.CUDA }}
            method: network
            sub-packages: '["nvcc", "cudart", "cublas", "cublas_dev", "thrust", "visual_studio_integration"]'


        - id: cpu-cores
          name: Get number of CPU cores
          uses: SimenB/github-actions-cpu-cores@v2

        - id: cmake_build
          name: Build
          run: |
            cd build
            cmake .. -DARCHITECTURE=${{ matrix.arch }} -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs ${{ matrix.cmake_vars }}
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}


        - id: copy_cuda_dlls
          if: matrix.arch == 'windows_cublas'
          name: Copy Cuda DLLs
          run: |
            mv "${{ env.CUDA_PATH }}"/bin/cudart64_*.dll build/libs/Release
            mv "${{ env.CUDA_PATH }}"/bin/cublas64_*.dll build/libs/Release
            mv "${{ env.CUDA_PATH }}"/bin/cublasLt64_*.dll build/libs/Release
          shell: bash

        - id: pack_artifacts_windows
          name: Pack artifacts
          run: |
            ls -R build
            mkdir artifacts
            move .\build\licenses\* .\artifacts\
            move .\build\Release\* .\artifacts\
            move .\build\libs\Release\*dll .\artifacts\
            del artifacts/llamalib_tests.*
            $serverPath = '.\build\libs\Release\llamalib_server.exe'
            if (Test-Path $serverPath) {
                move $serverPath -Destination '.\artifacts\'
            }
            cd artifacts
            7z a ../${{ matrix.arch }}.zip *

        - id: upload_llamalib
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ matrix.arch }}.zip
            path: ${{ matrix.arch }}.zip


  windows-hip:
    runs-on: windows-2019

    env:
      PLATFORM: windows
    
    strategy:
      matrix:
        include:
          - arch: windows_hip

    steps:
        - id: checkout
          name: Clone
          uses: actions/checkout@v4
          with:
            submodules: recursive

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            mkdir -p build/licenses build/libs
        
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            for f in ../patches/*;do
              git apply $f
            done
        
            if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
              echo "tinyblas"
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash


        - id: setup_openssl_windows
          name: Install OpenSSL
          run: |
            choco install openssl --no-progress
            $OPENSSL_ROOT_DIR = 'C:\Program Files\OpenSSL'
            Copy-Item $OPENSSL_ROOT_DIR\lib\VC\x64\MD\*.lib $OPENSSL_ROOT_DIR\lib\
            Copy-Item $OPENSSL_ROOT_DIR\lib\libcrypto_static.lib $OPENSSL_ROOT_DIR\lib\libcrypto.a
            Copy-Item $OPENSSL_ROOT_DIR\lib\libssl_static.lib $OPENSSL_ROOT_DIR\lib\libssl.a
            Add-Content $env:GITHUB_ENV "OPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR"

        - id: setup_hip_windows
          name: Install
          run: |
            $ErrorActionPreference = "Stop"
            write-host "Downloading AMD HIP SDK Installer"
            Invoke-WebRequest -Uri "https://download.amd.com/developer/eula/rocm-hub/AMD-Software-PRO-Edition-23.Q4-WinSvr2022-For-HIP.exe" -OutFile "${env:RUNNER_TEMP}\rocm-install.exe"
            write-host "Installing AMD HIP SDK"
            Start-Process "${env:RUNNER_TEMP}\rocm-install.exe" -ArgumentList '-install' -NoNewWindow -Wait
            write-host "Completed AMD HIP SDK installation"
            & 'C:\Program Files\AMD\ROCm\*\bin\clang.exe' --version


        - id: cpu-cores
          name: Get number of CPU cores
          uses: SimenB/github-actions-cpu-cores@v2

        - id: cmake_build_hip_windows
          name: Build
          run: |
            $env:HIP_PATH=$(Resolve-Path 'C:\Program Files\AMD\ROCm\*\bin\clang.exe' | split-path | split-path)
            $env:CMAKE_PREFIX_PATH="${env:HIP_PATH}"
            cd build
            cmake -G "Unix Makefiles" .. -DCMAKE_C_COMPILER="${env:HIP_PATH}\bin\clang.exe" -DCMAKE_CXX_COMPILER="${env:HIP_PATH}\bin\clang++.exe" -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs//Release -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs//Release ${{ matrix.cmake_vars }} -DARCHITECTURE=hip
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}
            mkdir Release


        - id: pack_artifacts_windows
          name: Pack artifacts
          run: |
            ls -R build
            mkdir artifacts
            move .\build\licenses\* .\artifacts\
            move .\build\Release\* .\artifacts\
            move .\build\libs\Release\*dll .\artifacts\
            del artifacts/llamalib_tests.*
            $serverPath = '.\build\libs\Release\llamalib_server.exe'
            if (Test-Path $serverPath) {
                move $serverPath -Destination '.\artifacts\'
            }
            cd artifacts
            7z a ../${{ matrix.arch }}.zip *

        - id: upload_llamalib
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ matrix.arch }}.zip
            path: ${{ matrix.arch }}.zip


################################ Android ################################

  android-build:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        include:
          - arch: android_arm64
            ABI: arm64-v8a
          - arch: android_x64
            ABI: x86_64

    steps:
        - id: setup_libs_linux
          name: Dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y build-essential cmake zip libssl-dev git libcurl4-openssl-dev curl


        - id: checkout
          name: Clone
          uses: actions/checkout@v4
          with:
            submodules: recursive

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            mkdir -p build/licenses build/libs
        
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            for f in ../patches/*;do
              git apply $f
            done
        
            if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
              echo "tinyblas"
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash


        - id: cpu-cores
          name: Get number of CPU cores
          uses: SimenB/github-actions-cpu-cores@v2

        - id: cmake_build_android
          name: Build
          run: |
            export LD_LIBRARY_PATH=""
            export NDK=`ls -d /usr/local/lib/android/sdk/ndk/26.*`
            cd build
            cmake .. -DARCHITECTURE=${{ matrix.arch }} -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake -DANDROID_PLATFORM=android-23 -DANDROID_ABI=${{ matrix.ABI }} -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs ${{ matrix.cmake_vars }}
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}


        - id: pack_artifacts_unix
          name: Pack artifacts
          run: |
            rm -f build/libs/llamalib_tests
            zip -j ${{ matrix.arch }}.zip build/licenses/* build/libs/*

        - id: upload_llamalib
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ matrix.arch }}.zip
            path: ${{ matrix.arch }}.zip


################################ iOS ################################

  ios-build:
    runs-on: macos-14

    strategy:
      matrix:
        include:
          - arch: ios
            cmake_vars: '-DCMAKE_SYSTEM_NAME=iOS'
          - arch: visionos
            cmake_vars: '-DCMAKE_SYSTEM_NAME=visionOS'

    steps:
        - continue-on-error: true
          id: setup_libs_macos
          name: Dependencies
          run: |
            echo "Architecture: $(uname -m)"
            echo "Operating System: $(uname -s)"
            brew update


        - id: checkout
          name: Clone
          uses: actions/checkout@v4
          with:
            submodules: recursive

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            mkdir -p build/licenses build/libs
        
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            for f in ../patches/*;do
              git apply $f
            done
        
            if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
              echo "tinyblas"
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash


        - id: cmake_build
          name: Build
          run: |
            cd build
            cmake .. -DARCHITECTURE=${{ matrix.arch }} -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs ${{ matrix.cmake_vars }}
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}

        - id: link_libraries_ios
          name: Link libraries
          run: |
            mkdir build/combo
            cd build/combo
            for f in `find .. -name "*.a"`;do ar -x $f;done
            lib=`ls ../libllamalib*.a |grep -v runtime`
            mv $lib $lib.orig
            ld -r -o $lib *.o
            nm -u $lib


        - id: pack_artifacts_ios
          name: Pack artifacts
          run: |
            zip -j ${{ matrix.arch }}.zip build/licenses/* build/libllamalib*.a

        - id: upload_llamalib
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ matrix.arch }}.zip
            path: ${{ matrix.arch }}.zip


################################ Release ################################

  create_release:
    name: Create Release
    runs-on: macos-14
    needs:
      - archchecker_linux_build
      - archchecker_windows_build
      - linux-build
      - linux-hip
      - macOS-arm64-build
      - macOS-x64-build
      - windows-build
      - windows-hip
      - android-build
      - ios-build
    steps:
        - id: checkout
          name: Clone
          uses: actions/checkout@v4
          with:
            submodules: recursive

        - id: set_release_prefix
          name: Set prefix
          run: |
            echo "PREFIX=llamalib-${{ github.ref_name }}" >> $GITHUB_ENV
          shell: bash

        - id: download_artifacts
          name: Download Artifacts
          uses: actions/download-artifact@v4
          with:
            path: artifacts

        - id: unzip_artifacts
          name: Unzip artifacts
          run: |
            cd artifacts
            ls -R
        
            for d in *.zip;do
              cd $d; unzip $d; rm $d; cd ..;
              echo $d  sed -e 's:.zip::g' >> bundle
            done

        - id: combine_macos_libraries
          name: Merge macOS libraries
          run: |
            cd artifacts
            for acc in acc no_acc;do
                mkdir macos_${acc}
                lipo -create -output macos_${acc}/libllamalib_macos_${acc}.dylib macos_x64_${acc}/libllamalib_macos_x64_${acc}.dylib macos_arm64_${acc}/libllamalib_macos_arm64_${acc}.dylib
                cp `ls macos_x64_${acc}/* | grep -v ".dylib"` macos_${acc}
                rm -r macos_x64_${acc} macos_arm64_${acc}
                sed -i.bak "/macos_x64_${acc}/d" bundle
                sed -i.bak "/macos_arm64_${acc}/d" bundle
                echo macos_${acc} >> bundle
            done

        - id: merge_artifacts
          name: Merge artifacts
          run: |
            cd artifacts
        
            servers=`find . -name llamalib_server*`
            if [ "$servers" != "" ];then
              zip -r llamalib-${{ github.ref_name }}-server.zip $servers
              rm $servers
            fi
        
            zip -r $PREFIX.zip `cat bundle | grep -v full` linux-archchecker windows-archchecker
            zip -r $PREFIX-full.zip `cat bundle | grep full`

        - id: release
          name: Release
          uses: softprops/action-gh-release@v2
          with:
            files: artifacts/*.zip
            name: Release ${{ github.ref_name }}

