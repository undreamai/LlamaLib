name: Build library

on:
  push:
    tags:
      - 'v*'

env:
  LLAMACPP_VERSION: 396856b4
  CMAKE_COMMON_JOBS: '-DLLAMA_BUILD_COMMON=ON -DGGML_STATIC=ON -DLLAMA_BUILD_TESTS=OFF -DLLAMA_BUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=OFF'
  CMAKE_COMMON_DIR: -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs

jobs:
  ################################ ArchChecker ################################

  archchecker_linux_build:
    name: Build ArchChecker Linux
    runs-on: ubuntu-22.04

    env:
        UPLOAD_NAME: linux-archchecker
        UPLOAD_PATH: archchecker/build/libarchchecker.so

    steps:
        - id: checkout_recursive
          name: Clone
          uses: actions/checkout@v4
          with:
            submodules: recursive

        - id: build_archchecker
          name: Build
          run: |
            mkdir archchecker/build
            cd archchecker/build
            cmake ..
            cmake --build . --config Release -j $(nproc)

        - id: upload
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.UPLOAD_NAME }}
            path: ${{ env.UPLOAD_PATH }}


  archchecker_windows_build:
    name: Build ArchChecker Windows
    runs-on: windows-2019

    env:
        UPLOAD_NAME: windows-archchecker
        UPLOAD_PATH: archchecker/build/Release/archchecker.dll

    steps:
        - id: checkout_recursive
          name: Clone
          uses: actions/checkout@v4
          with:
            submodules: recursive

        - id: build_archchecker
          name: Build
          run: |
            mkdir archchecker/build
            cd archchecker/build
            cmake ..
            cmake --build . --config Release -j $(nproc)

        - id: upload
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.UPLOAD_NAME }}
            path: ${{ env.UPLOAD_PATH }}



  ################################ Linux ################################

  linux-build:
    runs-on: ubuntu-22.04

    env:
      CMAKE_COMMON: '-DBUILD_UNDREAMAI_BINARIES=ON -DGGML_NATIVE=OFF -DLLAMA_SERVER_SSL=ON -DCMAKE_BUILD_RPATH_USE_ORIGIN=ON'
      PLATFORM: linux

    strategy:
      matrix:
        include:
          - build: 'noavx'
            defines: '-DGGML_AVX=OFF -DGGML_AVX2=OFF -DGGML_FMA=OFF'
          - build: 'avx2'
            defines: ''
          - build: 'avx'
            defines: '-DGGML_AVX2=OFF'
          - build: 'avx512'
            defines: '-DGGML_AVX512=ON'
          - build: 'vulkan'
            defines: '-DGGML_VULKAN=ON'
          - build: 'cuda-cu11.7.1'
            defines: '-DGGML_CUDA=ON -DCUDAToolkit_ROOT="$GITHUB_WORKSPACE/build/cuda" -DGGML_MINIMIZE_CODE_SIZE=ON -DGGML_NO_IQUANTS=ON'
            tinyBLAS: 'ON'
          - build: 'cuda-cu12.2.0'
            defines: '-DGGML_CUDA=ON -DCUDAToolkit_ROOT="$GITHUB_WORKSPACE/build/cuda" -DGGML_MINIMIZE_CODE_SIZE=ON -DGGML_NO_IQUANTS=ON'
            tinyBLAS: 'ON'
          - build: 'cuda-cu11.7.1-full'
            defines: '-DGGML_CUDA=ON -DCUDAToolkit_ROOT="$GITHUB_WORKSPACE/build/cuda"'
          - build: 'cuda-cu12.2.0-full'
            defines: '-DGGML_CUDA=ON -DCUDAToolkit_ROOT="$GITHUB_WORKSPACE/build/cuda"'
            
    steps:
        - id: setup_libs_linux
          name: Dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y build-essential cmake zip libssl-dev git


        - id: checkout
          name: Clone
          uses: actions/checkout@v4

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            git apply ../llama.cpp.patch
            if [[ "${{ matrix.tinyBLAS }}" != "" ]]; then
              echo "tinyBLAS"
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            mkdir -p build/licenses build/libs
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.tinyBLAS }}" != "" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash

        - id: set_name
          name: Set name
          run: |
            LIBRARY_SUFFIX="${{ env.PLATFORM }}"
            if [ "${{ matrix.build }}" != "" ];then LIBRARY_SUFFIX="$LIBRARY_SUFFIX-${{ matrix.build }}"; fi
            NAME=undreamai-${{ github.ref_name }}-llamacpp-$LIBRARY_SUFFIX.zip
            echo "LIBRARY_SUFFIX=$LIBRARY_SUFFIX" >> $GITHUB_ENV
            echo "UPLOAD_NAME=$NAME" >> $GITHUB_ENV
            echo "UPLOAD_PATH=$NAME" >> $GITHUB_ENV
          shell: bash


        - id: setup_vulkan_linux
          if: matrix.build == 'vulkan'
          name: Dependencies Vulcan
          run: |
            wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
            sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list https://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
            sudo apt-get update -y
            sudo apt-get install -y build-essential vulkan-sdk
            cp /lib/x86_64-linux-gnu/libvulkan.so.1 build/libs/

        - id: set_cuda_var
          if: startsWith(matrix.build, 'cuda')
          name: Set CUDA variable
          run: |
            echo "CUDA=$(echo "${{ matrix.build }}" | cut -d '-' -f2 | cut -c 3- )" >> $GITHUB_ENV
            echo "LD_LIBRARY_PATH=''" >> $GITHUB_ENV
          shell: bash

        - id: setup_cuda_linux
          if: startsWith(matrix.build, 'cuda')
          uses: Jimver/cuda-toolkit@v0.2.15
          with:
            cuda: ${{ env.CUDA }}
            linux-local-args: '["--toolkit"]'
            method: network

        - id: link_cuda_linux
          if: startsWith(matrix.build, 'cuda')
          name: Link Cuda
          run: |
            ln -s ${{ env.CUDA_PATH }} ${{ github.workspace }}/build/cuda


        - id: cpu-cores
          name: Get number of CPU cores
          uses: SimenB/github-actions-cpu-cores@v2

        - id: cmake_build
          name: Build
          run: |
            cd build
            cmake .. -DLIBRARY_SUFFIX="${{ env.LIBRARY_SUFFIX }}" ${{ matrix.defines }} ${{ env.CMAKE_COMMON }} ${{ env.CMAKE_COMMON_JOBS }} ${{ env.CMAKE_COMMON_DIR }}
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}

        - id: test_build_unix
          if: matrix.build == 'noavx' || matrix.build == 'avx' || matrix.build == 'avx2' ||
            matrix.build == 'acc' || matrix.build == 'no_acc'
          name: Test
          run: |
            cd build/libs
            curl -L -o model.gguf https://huggingface.co/afrideva/smol_llama-220M-openhermes-GGUF/resolve/main/smol_llama-220m-openhermes.q4_k_m.gguf?download=true
            ./undreamai_test -m model.gguf -np 1 --log-disable
            rm model.gguf


        - id: pack_artifacts_unix
          name: Pack artifacts
          run: |
            rm -f build/libs/undreamai_test
            zip -j ${{ env.UPLOAD_NAME }} build/licenses/* build/libs/*

        - id: upload
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.UPLOAD_NAME }}
            path: ${{ env.UPLOAD_PATH }}


  linux-hip:
    runs-on: ubuntu-22.04
    container: rocm/dev-ubuntu-22.04:5.5

    env:
        CMAKE_COMMON: '-DBUILD_UNDREAMAI_BINARIES=ON -DGGML_HIPBLAS=ON -DAMDGPU_TARGETS="gfx1030,gfx1031,gfx1032,gfx1100,gfx1101,gfx1102" -DGGML_NATIVE=OFF -DLLAMA_SERVER_SSL=ON -DCMAKE_BUILD_RPATH_USE_ORIGIN=ON'
        PLATFORM: linux

    strategy:
      matrix:
        include:
          - build: 'hip'

    steps:
        - id: setup_libs_linux
          name: Dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y build-essential cmake zip libssl-dev git


        - id: checkout
          name: Clone
          uses: actions/checkout@v4

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            git apply ../llama.cpp.patch
            if [[ "${{ matrix.tinyBLAS }}" != "" ]]; then
              echo "tinyBLAS"
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            mkdir -p build/licenses build/libs
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.tinyBLAS }}" != "" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash

        - id: set_name
          name: Set name
          run: |
            LIBRARY_SUFFIX="${{ env.PLATFORM }}"
            if [ "${{ matrix.build }}" != "" ];then LIBRARY_SUFFIX="$LIBRARY_SUFFIX-${{ matrix.build }}"; fi
            NAME=undreamai-${{ github.ref_name }}-llamacpp-$LIBRARY_SUFFIX.zip
            echo "LIBRARY_SUFFIX=$LIBRARY_SUFFIX" >> $GITHUB_ENV
            echo "UPLOAD_NAME=$NAME" >> $GITHUB_ENV
            echo "UPLOAD_PATH=$NAME" >> $GITHUB_ENV
          shell: bash


        - id: setup_hip_linux
          name: Dependencies
          run: |
            sudo apt-get install -y rocblas-dev hipblas-dev


        - id: set_build_params_hip_linux
          name: Set build parameters
          run: |
            echo "CMAKE_COMMON_DIR=-DCMAKE_HIP_COMPILER=$(hipconfig -l)/clang -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=`pwd`/build/libs -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=`pwd`/build/libs" >> $GITHUB_ENV

        - id: cmake_build
          name: Build
          run: |
            cd build
            cmake .. -DLIBRARY_SUFFIX="${{ env.LIBRARY_SUFFIX }}" ${{ matrix.defines }} ${{ env.CMAKE_COMMON }} ${{ env.CMAKE_COMMON_JOBS }} ${{ env.CMAKE_COMMON_DIR }}
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}


        - id: pack_artifacts_unix
          name: Pack artifacts
          run: |
            rm -f build/libs/undreamai_test
            zip -j ${{ env.UPLOAD_NAME }} build/licenses/* build/libs/*

        - id: upload
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.UPLOAD_NAME }}
            path: ${{ env.UPLOAD_PATH }}


################################ macOS ################################

  macOS-arm64-build:
    runs-on: macos-14

    env:
        CMAKE_COMMON: '-DBUILD_UNDREAMAI_BINARIES=ON -DLLAMA_SERVER_SSL=ON -DLLAMA_FATAL_WARNINGS=ON -DLLAMA_CURL=ON -DCMAKE_CXX_FLAGS="-march=armv8.2a+dotprod"'
        PLATFORM: macos-arm64

    strategy:
      matrix:
        include:
          - build: 'acc'
            defines: '-DGGML_METAL_EMBED_LIBRARY=ON'
          - build: 'no_acc'
            defines: '-DGGML_METAL_EMBED_LIBRARY=ON -DGGML_ACCELERATE=OFF -DGGML_BLAS=OFF'

    steps:
        - continue-on-error: true
          id: setup_libs_macos
          name: Dependencies
          run: |
            echo "Architecture: $(uname -m)"
            echo "Operating System: $(uname -s)"
            brew update

        - id: set_name
          name: Set name
          run: |
            LIBRARY_SUFFIX="${{ env.PLATFORM }}"
            if [ "${{ matrix.build }}" != "" ];then LIBRARY_SUFFIX="$LIBRARY_SUFFIX-${{ matrix.build }}"; fi
            NAME=undreamai-${{ github.ref_name }}-llamacpp-$LIBRARY_SUFFIX.zip
            echo "LIBRARY_SUFFIX=$LIBRARY_SUFFIX" >> $GITHUB_ENV
            echo "UPLOAD_NAME=$NAME" >> $GITHUB_ENV
            echo "UPLOAD_PATH=$NAME" >> $GITHUB_ENV
          shell: bash


        - id: checkout
          name: Clone
          uses: actions/checkout@v4

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            git apply ../llama.cpp.patch
            if [[ "${{ matrix.tinyBLAS }}" != "" ]]; then
              echo "tinyBLAS"
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            mkdir -p build/licenses build/libs
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.tinyBLAS }}" != "" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash


        - id: cpu-cores
          name: Get number of CPU cores
          uses: SimenB/github-actions-cpu-cores@v2

        - id: cmake_build
          name: Build
          run: |
            cd build
            cmake .. -DLIBRARY_SUFFIX="${{ env.LIBRARY_SUFFIX }}" ${{ matrix.defines }} ${{ env.CMAKE_COMMON }} ${{ env.CMAKE_COMMON_JOBS }} ${{ env.CMAKE_COMMON_DIR }}
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}


        - id: pack_artifacts_unix
          name: Pack artifacts
          run: |
            rm -f build/libs/undreamai_test
            zip -j ${{ env.UPLOAD_NAME }} build/licenses/* build/libs/*

        - id: upload
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.UPLOAD_NAME }}
            path: ${{ env.UPLOAD_PATH }}


  macOS-x64-build:
    runs-on: macos-13

    env:
        CMAKE_COMMON: '-DBUILD_UNDREAMAI_BINARIES=ON -DLLAMA_SERVER_SSL=ON -DLLAMA_FATAL_WARNINGS=ON -DLLAMA_CURL=ON'
        PLATFORM: macos-x64

    strategy:
      matrix:
        include:
          - build: 'acc'
            defines: '-DGGML_METAL=OFF'
          - build: 'no_acc'
            defines: '-DGGML_METAL=OFF -DGGML_ACCELERATE=OFF -DGGML_BLAS=OFF'

    steps:
        - continue-on-error: true
          id: setup_libs_macos
          name: Dependencies
          run: |
            echo "Architecture: $(uname -m)"
            echo "Operating System: $(uname -s)"
            brew update


        - id: checkout
          name: Clone
          uses: actions/checkout@v4

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            git apply ../llama.cpp.patch
            if [[ "${{ matrix.tinyBLAS }}" != "" ]]; then
              echo "tinyBLAS"
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            mkdir -p build/licenses build/libs
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.tinyBLAS }}" != "" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash

        - id: set_name
          name: Set name
          run: |
            LIBRARY_SUFFIX="${{ env.PLATFORM }}"
            if [ "${{ matrix.build }}" != "" ];then LIBRARY_SUFFIX="$LIBRARY_SUFFIX-${{ matrix.build }}"; fi
            NAME=undreamai-${{ github.ref_name }}-llamacpp-$LIBRARY_SUFFIX.zip
            echo "LIBRARY_SUFFIX=$LIBRARY_SUFFIX" >> $GITHUB_ENV
            echo "UPLOAD_NAME=$NAME" >> $GITHUB_ENV
            echo "UPLOAD_PATH=$NAME" >> $GITHUB_ENV
          shell: bash


        - id: cpu-cores
          name: Get number of CPU cores
          uses: SimenB/github-actions-cpu-cores@v2

        - id: cmake_build
          name: Build
          run: |
            cd build
            cmake .. -DLIBRARY_SUFFIX="${{ env.LIBRARY_SUFFIX }}" ${{ matrix.defines }} ${{ env.CMAKE_COMMON }} ${{ env.CMAKE_COMMON_JOBS }} ${{ env.CMAKE_COMMON_DIR }}
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}

        - id: test_build_unix
          if: matrix.build == 'noavx' || matrix.build == 'avx' || matrix.build == 'avx2' ||
            matrix.build == 'acc' || matrix.build == 'no_acc'
          name: Test
          run: |
            cd build/libs
            curl -L -o model.gguf https://huggingface.co/afrideva/smol_llama-220M-openhermes-GGUF/resolve/main/smol_llama-220m-openhermes.q4_k_m.gguf?download=true
            ./undreamai_test -m model.gguf -np 1 --log-disable
            rm model.gguf


        - id: pack_artifacts_unix
          name: Pack artifacts
          run: |
            rm -f build/libs/undreamai_test
            zip -j ${{ env.UPLOAD_NAME }} build/licenses/* build/libs/*

        - id: upload
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.UPLOAD_NAME }}
            path: ${{ env.UPLOAD_PATH }}



################################ Windows ################################

  windows-build:
    runs-on: windows-2019

    env:
      CMAKE_COMMON: '-DBUILD_UNDREAMAI_BINARIES=ON -DGGML_NATIVE=OFF -DLLAMA_SERVER_SSL=ON'
      VULKAN_VERSION: 1.3.261.1
      PLATFORM: windows

    strategy:
      matrix:
        include:
          - build: 'noavx'
            defines: '-DGGML_AVX=OFF -DGGML_AVX2=OFF -DGGML_FMA=OFF'
          - build: 'avx2'
            defines: ''
          - build: 'avx'
            defines: '-DGGML_AVX2=OFF'
          - build: 'avx512'
            defines: '-DGGML_AVX512=ON'
          - build: 'vulkan'
            defines: '-DGGML_VULKAN=ON'
          - build: 'cuda-cu11.7.1'
            defines: '-DGGML_CUDA=ON -DGGML_MINIMIZE_CODE_SIZE=ON -DGGML_NO_IQUANTS=ON'
            tinyBLAS: 'ON'
          - build: 'cuda-cu12.2.0'
            defines: '-DGGML_CUDA=ON -DGGML_MINIMIZE_CODE_SIZE=ON -DGGML_NO_IQUANTS=ON'
            tinyBLAS: 'ON'
          - build: 'cuda-cu11.7.1-full'
            defines: '-DGGML_CUDA=ON'
          - build: 'cuda-cu12.2.0-full'
            defines: '-DGGML_CUDA=ON'

    steps:
        - id: checkout
          name: Clone
          uses: actions/checkout@v4

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            git apply ../llama.cpp.patch
            if [[ "${{ matrix.tinyBLAS }}" != "" ]]; then
              echo "tinyBLAS"
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            mkdir -p build/licenses build/libs
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.tinyBLAS }}" != "" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash

        - id: set_name
          name: Set name
          run: |
            LIBRARY_SUFFIX="${{ env.PLATFORM }}"
            if [ "${{ matrix.build }}" != "" ];then LIBRARY_SUFFIX="$LIBRARY_SUFFIX-${{ matrix.build }}"; fi
            NAME=undreamai-${{ github.ref_name }}-llamacpp-$LIBRARY_SUFFIX.zip
            echo "LIBRARY_SUFFIX=$LIBRARY_SUFFIX" >> $GITHUB_ENV
            echo "UPLOAD_NAME=$NAME" >> $GITHUB_ENV
            echo "UPLOAD_PATH=$NAME" >> $GITHUB_ENV
          shell: bash


        - id: setup_vulcan_windows
          if: matrix.build == 'vulkan'
          name: Install Vulkan SDK
          run: |
            curl.exe -o $env:RUNNER_TEMP/VulkanSDK-Installer.exe -L "https://sdk.lunarg.com/sdk/download/${env:VULKAN_VERSION}/windows/VulkanSDK-${env:VULKAN_VERSION}-Installer.exe"
            & "$env:RUNNER_TEMP\VulkanSDK-Installer.exe" --accept-licenses --default-answer --confirm-command install
            Add-Content $env:GITHUB_ENV "VULKAN_SDK=C:\VulkanSDK\${env:VULKAN_VERSION}"
            Add-Content $env:GITHUB_PATH "C:\VulkanSDK\${env:VULKAN_VERSION}\bin"
            curl.exe -o $env:RUNNER_TEMP/VulkanRT-Components.zip -L "https://sdk.lunarg.com/sdk/download/1.3.283.0/windows/VulkanRT-1.3.283.0-Components.zip"
            7z x "-o${env:RUNNER_TEMP}" $env:RUNNER_TEMP/VulkanRT-Components.zip
            mkdir .\build\libs\Release
            cp ${env:RUNNER_TEMP}/VulkanRT*\x64\vulkan-1.dll .\build\libs\Release

        - id: setup_openssl_windows
          name: Install OpenSSL
          run: |
            choco install openssl --no-progress
            $OPENSSL_ROOT_DIR = 'C:\Program Files\OpenSSL'
            Copy-Item $OPENSSL_ROOT_DIR\lib\VC\x64\MD\*.lib $OPENSSL_ROOT_DIR\lib\
            Copy-Item $OPENSSL_ROOT_DIR\lib\libcrypto_static.lib $OPENSSL_ROOT_DIR\lib\libcrypto.a
            Copy-Item $OPENSSL_ROOT_DIR\lib\libssl_static.lib $OPENSSL_ROOT_DIR\lib\libssl.a
            Add-Content $env:GITHUB_ENV "OPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR"

        - id: set_cuda_var
          if: startsWith(matrix.build, 'cuda')
          name: Set CUDA variable
          run: |
            echo "CUDA=$(echo "${{ matrix.build }}" | cut -d '-' -f2 | cut -c 3- )" >> $GITHUB_ENV
            echo "LD_LIBRARY_PATH=''" >> $GITHUB_ENV
          shell: bash

        - id: setup_cuda_windows
          if: startsWith(matrix.build, 'cuda')
          uses: Jimver/cuda-toolkit@v0.2.15
          with:
            cuda: ${{ env.CUDA }}
            method: network
            sub-packages: '["nvcc", "cudart", "cublas", "cublas_dev", "thrust", "visual_studio_integration"]'


        - id: cpu-cores
          name: Get number of CPU cores
          uses: SimenB/github-actions-cpu-cores@v2

        - id: cmake_build
          name: Build
          run: |
            cd build
            cmake .. -DLIBRARY_SUFFIX="${{ env.LIBRARY_SUFFIX }}" ${{ matrix.defines }} ${{ env.CMAKE_COMMON }} ${{ env.CMAKE_COMMON_JOBS }} ${{ env.CMAKE_COMMON_DIR }}
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}


        - id: move_files_windows
          if: startsWith(matrix.build, 'hip')
          name: Move files to Release folder
          run: |
            mkdir build/Release
            mkdir build/libs/Release
            move build/libs/*exe build/libs/Release
            move build/libs/*dll build/libs/Release
            move build/libs/*exp build/libs/Release
            move build/libs/*lib build/libs/Release

        - id: copy_cuda_dlls
          if: ${{ startsWith(matrix.build, 'cuda') && matrix.tinyBLAS == '' }}
          name: Copy Cuda DLLs
          run: |
            mv "${{ env.CUDA_PATH }}"/bin/cudart64_*.dll build/libs/Release
            mv "${{ env.CUDA_PATH }}"/bin/cublas64_*.dll build/libs/Release
            mv "${{ env.CUDA_PATH }}"/bin/cublasLt64_*.dll build/libs/Release
          shell: bash

        - id: pack_artifacts_windows
          name: Pack artifacts
          run: |
            ls -R build
            del build/libs/Release/undreamai_test.*
            mkdir artifacts
            move .\build\licenses\* .\artifacts\
            move .\build\Release\* .\artifacts\
            move .\build\libs\Release\*dll .\artifacts\
            $serverPath = ".\build\libs\Release\undreamai_server.exe"
            if (Test-Path $serverPath) {
                move $serverPath -Destination ".\artifacts\"
            }
            cd artifacts
            7z a ../${{ env.UPLOAD_NAME }} *

        - id: upload
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.UPLOAD_NAME }}
            path: ${{ env.UPLOAD_PATH }}


  windows-hip:
    runs-on: windows-2019

    env:
      CMAKE_COMMON: '-DBUILD_UNDREAMAI_BINARIES=ON -DGGML_HIPBLAS=ON -DAMDGPU_TARGETS="gfx1030,gfx1031,gfx1032,gfx1100,gfx1101,gfx1102" -DGGML_NATIVE=OFF -DLLAMA_SERVER_SSL=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs'
      PLATFORM: windows
    
    strategy:
      matrix:
        include:
          - build: 'hip'

    steps:
        - id: checkout
          name: Clone
          uses: actions/checkout@v4

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            git apply ../llama.cpp.patch
            if [[ "${{ matrix.tinyBLAS }}" != "" ]]; then
              echo "tinyBLAS"
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            mkdir -p build/licenses build/libs
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.tinyBLAS }}" != "" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash

        - id: set_name
          name: Set name
          run: |
            LIBRARY_SUFFIX="${{ env.PLATFORM }}"
            if [ "${{ matrix.build }}" != "" ];then LIBRARY_SUFFIX="$LIBRARY_SUFFIX-${{ matrix.build }}"; fi
            NAME=undreamai-${{ github.ref_name }}-llamacpp-$LIBRARY_SUFFIX.zip
            echo "LIBRARY_SUFFIX=$LIBRARY_SUFFIX" >> $GITHUB_ENV
            echo "UPLOAD_NAME=$NAME" >> $GITHUB_ENV
            echo "UPLOAD_PATH=$NAME" >> $GITHUB_ENV
          shell: bash


        - id: set_cuda_var
          if: startsWith(matrix.build, 'cuda')
          name: Set CUDA variable
          run: |
            echo "CUDA=$(echo "${{ matrix.build }}" | cut -d '-' -f2 | cut -c 3- )" >> $GITHUB_ENV
            echo "LD_LIBRARY_PATH=''" >> $GITHUB_ENV
          shell: bash

        - id: setup_openssl_windows
          name: Install OpenSSL
          run: |
            choco install openssl --no-progress
            $OPENSSL_ROOT_DIR = 'C:\Program Files\OpenSSL'
            Copy-Item $OPENSSL_ROOT_DIR\lib\VC\x64\MD\*.lib $OPENSSL_ROOT_DIR\lib\
            Copy-Item $OPENSSL_ROOT_DIR\lib\libcrypto_static.lib $OPENSSL_ROOT_DIR\lib\libcrypto.a
            Copy-Item $OPENSSL_ROOT_DIR\lib\libssl_static.lib $OPENSSL_ROOT_DIR\lib\libssl.a
            Add-Content $env:GITHUB_ENV "OPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR"

        - id: setup_hip_windows
          name: Install
          run: |
            $ErrorActionPreference = "Stop"
            write-host "Downloading AMD HIP SDK Installer"
            Invoke-WebRequest -Uri "https://download.amd.com/developer/eula/rocm-hub/AMD-Software-PRO-Edition-23.Q4-WinSvr2022-For-HIP.exe" -OutFile "${env:RUNNER_TEMP}\rocm-install.exe"
            write-host "Installing AMD HIP SDK"
            Start-Process "${env:RUNNER_TEMP}\rocm-install.exe" -ArgumentList '-install' -NoNewWindow -Wait
            write-host "Completed AMD HIP SDK installation"
            & 'C:\Program Files\AMD\ROCm\*\bin\clang.exe' --version


        - id: cpu-cores
          name: Get number of CPU cores
          uses: SimenB/github-actions-cpu-cores@v2

        - id: cmake_build_hip_windows
          name: Build
          run: |
            $env:HIP_PATH=$(Resolve-Path 'C:\Program Files\AMD\ROCm\*\bin\clang.exe' | split-path | split-path)
            $env:CMAKE_PREFIX_PATH="${env:HIP_PATH}"
            cd build
            cmake -G "Unix Makefiles" .. -DLIBRARY_SUFFIX="${{ env.PLATFORM }}-${{ matrix.build }}" -DCMAKE_C_COMPILER="${env:HIP_PATH}\bin\clang.exe" -DCMAKE_CXX_COMPILER="${env:HIP_PATH}\bin\clang++.exe" ${{ env.CMAKE_COMMON }} ${{ env.CMAKE_COMMON_JOBS }} ${{ env.CMAKE_COMMON_DIR }}
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}


        - id: move_files_windows
          if: startsWith(matrix.build, 'hip')
          name: Move files to Release folder
          run: |
            mkdir build/Release
            mkdir build/libs/Release
            move build/libs/*exe build/libs/Release
            move build/libs/*dll build/libs/Release
            move build/libs/*exp build/libs/Release
            move build/libs/*lib build/libs/Release

        - id: pack_artifacts_windows
          name: Pack artifacts
          run: |
            ls -R build
            del build/libs/Release/undreamai_test.*
            mkdir artifacts
            move .\build\licenses\* .\artifacts\
            move .\build\Release\* .\artifacts\
            move .\build\libs\Release\*dll .\artifacts\
            $serverPath = ".\build\libs\Release\undreamai_server.exe"
            if (Test-Path $serverPath) {
                move $serverPath -Destination ".\artifacts\"
            }
            cd artifacts
            7z a ../${{ env.UPLOAD_NAME }} *

        - id: upload
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.UPLOAD_NAME }}
            path: ${{ env.UPLOAD_PATH }}


################################ Android ################################

  android-build:
    runs-on: ubuntu-22.04

    env:
      CMAKE_COMMON: '-DBUILD_UNDREAMAI_BINARIES=OFF -DGGML_NATIVE=OFF -DGGML_OPENMP=OFF'
      VULKAN_VERSION: 1.3.261.1
      PLATFORM: android

    steps:
        - id: setup_libs_linux
          name: Dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y build-essential cmake zip libssl-dev git


        - id: checkout
          name: Clone
          uses: actions/checkout@v4

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            git apply ../llama.cpp.patch
            if [[ "${{ matrix.tinyBLAS }}" != "" ]]; then
              echo "tinyBLAS"
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            mkdir -p build/licenses build/libs
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.tinyBLAS }}" != "" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash

        - id: set_name
          name: Set name
          run: |
            LIBRARY_SUFFIX="${{ env.PLATFORM }}"
            if [ "${{ matrix.build }}" != "" ];then LIBRARY_SUFFIX="$LIBRARY_SUFFIX-${{ matrix.build }}"; fi
            NAME=undreamai-${{ github.ref_name }}-llamacpp-$LIBRARY_SUFFIX.zip
            echo "LIBRARY_SUFFIX=$LIBRARY_SUFFIX" >> $GITHUB_ENV
            echo "UPLOAD_NAME=$NAME" >> $GITHUB_ENV
            echo "UPLOAD_PATH=$NAME" >> $GITHUB_ENV
          shell: bash


        - id: set_ndk_var_linux
          name: Set NDK variable
          run: |
            echo "NDK=`ls -d /usr/local/lib/android/sdk/ndk/26.*`" >> $GITHUB_ENV

        - id: cmake_build_android
          name: Build
          run: |
            export LD_LIBRARY_PATH=""
            cd build
            cmake .. -DLIBRARY_SUFFIX="${{ env.PLATFORM }}" -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-23 -DCMAKE_C_FLAGS=-march=armv8.4a+dotprod ${{ env.CMAKE_COMMON }} ${{ env.CMAKE_COMMON_JOBS }} ${{ env.CMAKE_COMMON_DIR }}
            cmake --build . --config Release -j $(nproc)


        - id: pack_artifacts_unix
          name: Pack artifacts
          run: |
            rm -f build/libs/undreamai_test
            zip -j ${{ env.UPLOAD_NAME }} build/licenses/* build/libs/*

        - id: upload
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.UPLOAD_NAME }}
            path: ${{ env.UPLOAD_PATH }}


################################ iOS ################################

  ios-build:
    runs-on: macos-14

    env:
      CMAKE_COMMON: '-DBUILD_UNDREAMAI_BINARIES=OFF -DGGML_METAL_EMBED_LIBRARY=ON -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_DEPLOYMENT_TARGET=14.0 -DCMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM=ggml'
      PLATFORM: ios

    steps:
        - continue-on-error: true
          id: setup_libs_macos
          name: Dependencies
          run: |
            echo "Architecture: $(uname -m)"
            echo "Operating System: $(uname -s)"
            brew update


        - id: checkout
          name: Clone
          uses: actions/checkout@v4

        - id: setup_llama_cpp
          name: Setup llama.cpp
          run: |
            git clone https://github.com/ggerganov/llama.cpp llama.cpp
            cd llama.cpp
            git checkout ${{ env.LLAMACPP_VERSION }}
        
            git apply ../llama.cpp.patch
            if [[ "${{ matrix.tinyBLAS }}" != "" ]]; then
              echo "tinyBLAS"
              mv ggml/src/ggml-cuda/CMakeLists.txt CMakeLists.txt.ggml-cuda
              rm -r ggml/src/ggml-cuda
              cp -R ../tinyBLAS ggml/src/ggml-cuda
              mv CMakeLists.txt.ggml-cuda ggml/src/ggml-cuda/CMakeLists.txt
            fi
        
            for f in examples/server/public/*;do
                cmake -DINPUT="$f" -DOUTPUT="$(echo "$f" | sed -e 's:public/::g').hpp" -P "scripts/xxd.cmake"
            done
          shell: bash

        - id: add_licenses
          name: Add licenses
          run: |
            mkdir -p build/licenses build/libs
            cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
            if [[ "${{ matrix.tinyBLAS }}" != "" ]]; then
              curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
            fi
          shell: bash

        - id: set_name
          name: Set name
          run: |
            LIBRARY_SUFFIX="${{ env.PLATFORM }}"
            if [ "${{ matrix.build }}" != "" ];then LIBRARY_SUFFIX="$LIBRARY_SUFFIX-${{ matrix.build }}"; fi
            NAME=undreamai-${{ github.ref_name }}-llamacpp-$LIBRARY_SUFFIX.zip
            echo "LIBRARY_SUFFIX=$LIBRARY_SUFFIX" >> $GITHUB_ENV
            echo "UPLOAD_NAME=$NAME" >> $GITHUB_ENV
            echo "UPLOAD_PATH=$NAME" >> $GITHUB_ENV
          shell: bash


        - id: cmake_build
          name: Build
          run: |
            cd build
            cmake .. -DLIBRARY_SUFFIX="${{ env.LIBRARY_SUFFIX }}" ${{ matrix.defines }} ${{ env.CMAKE_COMMON }} ${{ env.CMAKE_COMMON_JOBS }} ${{ env.CMAKE_COMMON_DIR }}
            cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}

        - id: link_libraries_ios
          name: Link libraries
          run: |
            mkdir build/combo
            cd build/combo
            for f in `find .. -name "*.a"`;do ar -x $f;done
            mv ../libundreamai_iOS.a ../libundreamai_iOS.a.orig
            ld -r -o ../libundreamai_iOS.a *.o
            nm -u ../libundreamai_iOS.a


        - id: pack_artifacts_ios
          name: Pack artifacts
          run: |
            zip -j ${{ env.UPLOAD_NAME }} build/licenses/* build/libundreamai_ios.a

        - id: upload
          name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: ${{ env.UPLOAD_NAME }}
            path: ${{ env.UPLOAD_PATH }}


################################ Release ################################

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - archchecker_linux_build
      - archchecker_windows_build
      - linux-build
      - linux-hip
      - macOS-arm64-build
      - macOS-x64-build
      - windows-build
      - windows-hip
      - android-build
      - ios-build
    steps:
        - id: checkout
          name: Clone
          uses: actions/checkout@v4

        - id: download_artifacts
          name: Download Artifacts
          uses: actions/download-artifact@v4
          with:
            path: artifacts

        - id: merge_artifacts
          name: Merge artifacts
          run: |
            cd artifacts
            ls -R
            PREFIX=undreamai-${{ github.ref_name }}-llamacpp
        
            for d in `ls | grep $PREFIX`;do
              cd $d; unzip $d; rm $d; cd ..;
              new_name=`echo $d | sed -e "s:$PREFIX-::g" | sed -e 's:.zip::g'`
              mv $d $new_name;
              echo $new_name >> bundle
            done
        
            servers=`find . -name undreamai_server*`
            if [ "$servers" != "" ];then
              zip -r undreamai-${{ github.ref_name }}-server.zip $servers
              rm $servers
            fi
        
            zip -r $PREFIX.zip `cat bundle | grep -v full` linux-archchecker windows-archchecker
            zip -r $PREFIX-full.zip `cat bundle | grep full`

        - id: release
          name: Release
          uses: softprops/action-gh-release@v2
          with:
            files: artifacts/*.zip
            name: Release ${{ github.ref_name }}

