################################ Prefix for error highlighting ################################
on:
  push:
    tags:
      - 'lala'
jobs:
  lala:
    runs-on: lala

################################ START ################################

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Upload Artifacts
        id: upload_llamalib
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch }}.zip
          path: ${{ matrix.arch }}.zip

      - name: Add licenses
        id: add_licenses
        shell: bash
        run: |
          mkdir -p build/licenses
          cp llama.cpp/LICENSE build/licenses/llama.cpp.LICENSE.txt
          if [[ "${{ matrix.arch }}" == "linux_tinyblas" || "${{ matrix.arch }}" == "windows_tinyblas" ]]; then
            curl -o build/licenses/llamafile.LICENSE.txt -L https://raw.githubusercontent.com/Mozilla-Ocho/llamafile/main/LICENSE
          fi

      - name: Get number of CPU cores
        id: cpu-cores
        uses: SimenB/github-actions-cpu-cores@v2

      - name: Build
        id: cmake_build
        run: |
          cd build
          cmake .. -DARCHITECTURE=${{ matrix.arch }} -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs ${{ matrix.cmake_vars }}
          cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}

      - name: Build OpenSSL
        id: build_openssl
        run: |
          .github/build_openssl.sh ${{ matrix.arch }}

################################ Linux ################################

      - name: Dependencies
        id: setup_libs_linux
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake zip libssl-dev git libcurl4-openssl-dev curl

      - name: Dependencies
        id: setup_hip_linux
        run: |
          sudo apt-get install -y rocblas-dev hipblas-dev
          echo "CMAKE_HIP_COMPILER=$(hipconfig -l)/clang" >> $GITHUB_ENV

      - name: Dependencies Vulcan
        id: setup_vulkan_linux
        if: matrix.arch == 'linux_vulkan'
        run: |
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list https://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list
          sudo apt-get update -y
          sudo apt-get install -y build-essential vulkan-sdk
          mkdir -p build/libs
          cp /lib/x86_64-linux-gnu/libvulkan.so.1 build/libs/

      - uses: Jimver/cuda-toolkit@v0.2.15
        id: setup_cuda_linux
        if: matrix.arch == 'linux_cublas' || matrix.arch == 'linux_tinyblas'
        with:
          cuda: ${{ env.CUDA }}
          method: 'network'
          linux-local-args: '["--toolkit"]'

      - name: Link Cuda
        id: link_cuda_linux
        if: matrix.arch == 'linux_cublas' || matrix.arch == 'linux_tinyblas'
        run: |
          ln -s ${{ env.CUDA_PATH }} ${{ github.workspace }}/build/cuda
          echo "CUDAToolkit_ROOT=$GITHUB_WORKSPACE/build/cuda" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=''" >> $GITHUB_ENV

      - name: Test
        id: test_build_linux
        if: matrix.arch == 'linux_noavx' || matrix.arch == 'linux_avx2'
        run: |
          cd build/libs
          curl -L -o model.gguf https://huggingface.co/afrideva/smol_llama-220M-openhermes-GGUF/resolve/main/smol_llama-220m-openhermes.q4_k_m.gguf?download=true
          ./llamalib_tests -m model.gguf -np 1 --log-disable
          rm model.gguf

      - name: Pack artifacts
        id: pack_artifacts_unix
        run: |
          rm -f build/libs/llamalib_tests
          zip -j ${{ matrix.arch }}.zip build/licenses/* build/libs/*

################################ macOS ################################

      - name: Dependencies
        id: setup_libs_macos
        continue-on-error: true
        run: |
          echo "Architecture: $(uname -m)"
          echo "Operating System: $(uname -s)"
          brew update

      - name: Test
        id: test_build_macos
        run: |
          cd build/libs
          templib=libllamalib_`echo ${{ matrix.arch }} | sed 's/arm64_//g; s/x64_//g'`.dylib
          ln -s libllamalib_${{ matrix.arch }}.dylib $templib
          curl -L -o model.gguf https://huggingface.co/afrideva/smol_llama-220M-openhermes-GGUF/resolve/main/smol_llama-220m-openhermes.q4_k_m.gguf?download=true
          ./llamalib_tests -m model.gguf -np 1 --log-disable
          rm model.gguf $templib

################################ Windows ################################

      - name: Install Vulkan SDK
        id: setup_vulcan_windows
        if: matrix.arch == 'windows_vulkan'
        run: |
          curl.exe -o $env:RUNNER_TEMP/VulkanSDK-Installer.exe -L "https://sdk.lunarg.com/sdk/download/${env:VULKAN_VERSION}/windows/VulkanSDK-${env:VULKAN_VERSION}-Installer.exe"
          & "$env:RUNNER_TEMP\VulkanSDK-Installer.exe" --accept-licenses --default-answer --confirm-command install
          Add-Content $env:GITHUB_ENV "VULKAN_SDK=C:\VulkanSDK\${env:VULKAN_VERSION}"
          Add-Content $env:GITHUB_PATH "C:\VulkanSDK\${env:VULKAN_VERSION}\bin"
          curl.exe -o $env:RUNNER_TEMP/VulkanRT-Components.zip -L "https://sdk.lunarg.com/sdk/download/1.3.283.0/windows/VulkanRT-1.3.283.0-Components.zip"
          7z x "-o${env:RUNNER_TEMP}" $env:RUNNER_TEMP/VulkanRT-Components.zip
          mkdir .\build\libs\Release
          cp ${env:RUNNER_TEMP}/VulkanRT*\x64\vulkan-1.dll .\build\libs\Release

      - name: Install OpenSSL
        id: setup_openssl_windows
        run: |
          choco install openssl --no-progress
          $OPENSSL_ROOT_DIR = 'C:\Program Files\OpenSSL'
          Copy-Item $OPENSSL_ROOT_DIR\lib\VC\x64\MD\*.lib $OPENSSL_ROOT_DIR\lib\
          Copy-Item $OPENSSL_ROOT_DIR\lib\libcrypto_static.lib $OPENSSL_ROOT_DIR\lib\libcrypto.a
          Copy-Item $OPENSSL_ROOT_DIR\lib\libssl_static.lib $OPENSSL_ROOT_DIR\lib\libssl.a
          Add-Content $env:GITHUB_ENV "OPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR"

      - name: Build
        id: cmake_build_hip_windows
        run: |
          $env:HIP_PATH=$(Resolve-Path 'C:\Program Files\AMD\ROCm\*\bin\clang.exe' | split-path | split-path)
          $env:CMAKE_PREFIX_PATH="${env:HIP_PATH}"
          cd build
          cmake -G "Unix Makefiles" .. -DCMAKE_C_COMPILER="${env:HIP_PATH}\bin\clang.exe" -DCMAKE_CXX_COMPILER="${env:HIP_PATH}\bin\clang++.exe" -DCMAKE_CXX_FLAGS="-I$($PWD.Path.Replace('\', '/'))/rocwmma/library/include/" -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs/Release -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs/Release ${{ matrix.cmake_vars }} -DARCHITECTURE=${{ matrix.arch }}
          cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}
          mkdir Release

      - uses: Jimver/cuda-toolkit@v0.2.15
        id: setup_cuda_windows
        if: matrix.arch == 'windows_cublas' || matrix.arch == 'windows_tinyblas'
        with:
          cuda: ${{ env.CUDA }}
          method: 'network'
          sub-packages: '["nvcc", "cudart", "cublas", "cublas_dev", "thrust", "visual_studio_integration"]'

      - name: Copy Cuda DLLs
        id: copy_cuda_dlls
        if: matrix.arch == 'windows_cublas'
        shell: bash
        run: |
          mv "${{ env.CUDA_PATH }}"/bin/cudart64_*.dll build/libs/Release
          mv "${{ env.CUDA_PATH }}"/bin/cublas64_*.dll build/libs/Release
          mv "${{ env.CUDA_PATH }}"/bin/cublasLt64_*.dll build/libs/Release

      - id: test_build_windows
        if: matrix.arch == 'windows_noavx' || matrix.arch == 'windows_avx2'
        name: Test
        run: |
          cd build/libs/Release
          curl.exe -o model.gguf -L "https://huggingface.co/afrideva/smol_llama-220M-openhermes-GGUF/resolve/main/smol_llama-220m-openhermes.q4_k_m.gguf"
          .\llamalib_tests.exe -m model.gguf -np 1 --log-disable
          rm model.gguf

      - name: Pack artifacts
        id: pack_artifacts_windows
        run: |
          ls -R build
          mkdir artifacts
          move .\build\licenses\* .\artifacts\
          move .\build\Release\* .\artifacts\
          move .\build\libs\Release\*dll .\artifacts\
          del artifacts/llamalib_tests.*
          $serverPath = '.\build\libs\Release\llamalib_server.exe'
          if (Test-Path $serverPath) {
              move $serverPath -Destination '.\artifacts\'
          }
          cd artifacts
          7z a ../${{ matrix.arch }}.zip *

      - name: Install
        id: setup_hip_windows
        run: |
          git clone https://github.com/rocm/rocwmma --branch rocm-6.2.4 --depth 1
          $ErrorActionPreference = "Stop"
          write-host "Downloading AMD HIP SDK Installer"
          Invoke-WebRequest -Uri "https://download.amd.com/developer/eula/rocm-hub/AMD-Software-PRO-Edition-24.Q3-WinSvr2022-For-HIP.exe" -OutFile "${env:RUNNER_TEMP}\rocm-install.exe"
          write-host "Installing AMD HIP SDK"
          Start-Process "${env:RUNNER_TEMP}\rocm-install.exe" -ArgumentList '-install' -NoNewWindow -Wait
          write-host "Completed AMD HIP SDK installation"
          & 'C:\Program Files\AMD\ROCm\*\bin\clang.exe' --version

################################ Android ################################

      - name: Build
        id: cmake_build_android
        run: |
          export LD_LIBRARY_PATH=""
          export NDK=`ls -d /usr/local/lib/android/sdk/ndk/26.*`
          cd build
          cmake .. -DARCHITECTURE=${{ matrix.arch }} -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake -DANDROID_PLATFORM=android-23 -DANDROID_ABI=${{ matrix.ABI }} -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs ${{ matrix.cmake_vars }}
          cmake --build . --config Release -j ${{ steps.cpu-cores.outputs.count }}

################################ iOS ################################

      - id: pack_artifacts_ios
        name: Pack artifacts
        run: |
          zip -j ${{ matrix.arch }}.zip build/licenses/* build/libllamalib*.a

      - id: link_libraries_ios
        name: Link libraries
        run: |
          mkdir build/combo
          cd build/combo
          for f in `find .. -name "*.a"`;do ar -x $f;done
          lib=`ls ../libllamalib*.a |grep -v runtime`
          mv $lib $lib.orig
          ld -r -o $lib *.o
          nm -u $lib

################################ Release ################################

      - id: set_release_prefix
        name: Set prefix
        run: |
          echo "PREFIX=llamalib-${{ github.ref_name }}" >> $GITHUB_ENV
        shell: bash

      - name: Download Artifacts
        id: download_artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - id: unzip_artifacts
        name: Unzip and merge artifacts
        run: |
          cd artifacts
          ls -R
          for d in *.zip;do
            platform=`echo $d|cut -d'.' -f1|cut -d'_' -f1`
            mkdir -p libs/$platform
            unzip -o $d/$d -d libs/$platform
            rm -r $d
          done

      - id: combine_macos_libraries
        name: Merge macOS libraries
        run: |
          cd artifacts/libs/macos/
          for acc in acc no_acc;do
              lipo -create -output libllamalib_macos_${acc}.dylib libllamalib_macos_x64_${acc}.dylib libllamalib_macos_arm64_${acc}.dylib
              rm libllamalib_macos_x64_${acc}.dylib libllamalib_macos_arm64_${acc}.dylib
          done

      - name: Merge artifacts
        id: merge_artifacts
        run: |
          cd artifacts
          servers=`find . -name llamalib_server*`
          if [ "$servers" != "" ];then
            zip -r $PREFIX-server.zip $servers
            rm $servers
          fi
          zip -r $PREFIX.zip libs

      - name: Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          name: "Release ${{ github.ref_name }}"
          files: "artifacts/*.zip"
