name: Build library

on:
  push:
    tags:
      - 'v*'

env:
  LLAMACPP_VERSION: b4688
  CMAKE_COMMON_JOBS: '-DLLAMA_BUILD_COMMON=ON -DGGML_STATIC=ON -DLLAMA_BUILD_TESTS=OFF -DLLAMA_BUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=OFF'
  CMAKE_COMMON_DIR: -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs

jobs:
  ################################ ArchChecker ################################

  archchecker_linux_build:
    name: Build ArchChecker Linux
    runs-on: ubuntu-22.04

    env:
        UPLOAD_NAME: linux-archchecker
        UPLOAD_PATH: archchecker/build/libarchchecker.so

    steps:
        @@checkout_recursive@@
        @@build_archchecker@@
        @@upload@@

  archchecker_windows_build:
    name: Build ArchChecker Windows
    runs-on: windows-2019

    env:
        UPLOAD_NAME: windows-archchecker
        UPLOAD_PATH: archchecker/build/Release/archchecker.dll

    steps:
        @@checkout_recursive@@
        @@build_archchecker@@
        @@upload@@


  ################################ Linux ################################

  linux-build:
    runs-on: ubuntu-22.04

    env:
      CMAKE_COMMON: '-DBUILD_UNDREAMAI_BINARIES=ON -DGGML_NATIVE=OFF -DLLAMA_SERVER_SSL=ON -DCMAKE_BUILD_RPATH_USE_ORIGIN=ON'
      PLATFORM: linux

    strategy:
      matrix:
        include:
          - build: 'noavx'
            defines: '-DGGML_AVX=OFF -DGGML_AVX2=OFF -DGGML_FMA=OFF'
          - build: 'avx2'
            defines: ''
          - build: 'avx'
            defines: '-DGGML_AVX2=OFF'
          - build: 'avx512'
            defines: '-DGGML_AVX512=ON'
          - build: 'vulkan'
            defines: '-DGGML_VULKAN=ON'
          - build: 'cuda-cu12.2.0'
            defines: '-DGGML_CUDA=ON -DCUDAToolkit_ROOT="$GITHUB_WORKSPACE/build/cuda" -DGGML_MINIMIZE_CODE_SIZE=ON -DGGML_NO_IQUANTS=ON'
            tinyBLAS: 'ON'
          - build: 'cuda-cu12.2.0-full'
            defines: '-DGGML_CUDA=ON -DCUDAToolkit_ROOT="$GITHUB_WORKSPACE/build/cuda"'
            
    steps:
        @@setup_libs_linux@@

        @@checkout@@
        @@setup_llama_cpp@@
        @@add_licenses@@
        @@set_name@@

        @@setup_vulkan_linux@@
        @@set_cuda_var@@
        @@setup_cuda_linux@@
        @@link_cuda_linux@@

        @@cpu-cores@@
        @@cmake_build@@
        @@test_build_unix@@

        @@pack_artifacts_unix@@
        @@upload@@

  linux-hip:
    runs-on: ubuntu-22.04
    container: rocm/dev-ubuntu-22.04:5.5

    env:
        CMAKE_COMMON: '-DBUILD_UNDREAMAI_BINARIES=ON -DGGML_HIPBLAS=ON -DAMDGPU_TARGETS="gfx1030,gfx1031,gfx1032,gfx1100,gfx1101,gfx1102" -DGGML_NATIVE=OFF -DLLAMA_SERVER_SSL=ON -DCMAKE_BUILD_RPATH_USE_ORIGIN=ON'
        PLATFORM: linux

    strategy:
      matrix:
        include:
          - build: 'hip'

    steps:
        @@setup_libs_linux@@

        @@checkout@@
        @@setup_llama_cpp@@
        @@add_licenses@@
        @@set_name@@

        @@setup_hip_linux@@

        @@set_build_params_hip_linux@@
        @@cmake_build@@

        @@pack_artifacts_unix@@
        @@upload@@

################################ macOS ################################

  macOS-arm64-build:
    runs-on: macos-14

    env:
        CMAKE_COMMON: '-DBUILD_UNDREAMAI_BINARIES=ON -DLLAMA_SERVER_SSL=ON -DLLAMA_FATAL_WARNINGS=ON -DLLAMA_CURL=ON -DCMAKE_CXX_FLAGS="-march=armv8.2a+dotprod"'
        PLATFORM: macos-arm64

    strategy:
      matrix:
        include:
          - build: 'acc'
            defines: '-DGGML_METAL_EMBED_LIBRARY=ON'
          - build: 'no_acc'
            defines: '-DGGML_METAL_EMBED_LIBRARY=ON -DGGML_ACCELERATE=OFF -DGGML_BLAS=OFF'

    steps:
        @@setup_libs_macos@@
        @@set_name@@

        @@checkout@@
        @@setup_llama_cpp@@
        @@add_licenses@@

        @@cpu-cores@@
        @@cmake_build@@

        @@pack_artifacts_unix@@
        @@upload@@

  macOS-x64-build:
    runs-on: macos-13

    env:
        CMAKE_COMMON: '-DBUILD_UNDREAMAI_BINARIES=ON -DLLAMA_SERVER_SSL=ON -DLLAMA_FATAL_WARNINGS=ON -DLLAMA_CURL=ON'
        PLATFORM: macos-x64

    strategy:
      matrix:
        include:
          - build: 'acc'
            defines: '-DGGML_METAL=OFF'
          - build: 'no_acc'
            defines: '-DGGML_METAL=OFF -DGGML_ACCELERATE=OFF -DGGML_BLAS=OFF'

    steps:
        @@setup_libs_macos@@

        @@checkout@@
        @@setup_llama_cpp@@
        @@add_licenses@@
        @@set_name@@

        @@cpu-cores@@
        @@cmake_build@@
        @@test_build_unix@@

        @@pack_artifacts_unix@@
        @@upload@@


################################ Windows ################################

  windows-build:
    runs-on: windows-2019

    env:
      CMAKE_COMMON: '-DBUILD_UNDREAMAI_BINARIES=ON -DGGML_NATIVE=OFF -DLLAMA_SERVER_SSL=ON'
      VULKAN_VERSION: 1.3.261.1
      PLATFORM: windows

    strategy:
      matrix:
        include:
          - build: 'noavx'
            defines: '-DGGML_AVX=OFF -DGGML_AVX2=OFF -DGGML_FMA=OFF'
          - build: 'avx2'
            defines: ''
          - build: 'avx'
            defines: '-DGGML_AVX2=OFF'
          - build: 'avx512'
            defines: '-DGGML_AVX512=ON'
          - build: 'vulkan'
            defines: '-DGGML_VULKAN=ON'
          - build: 'cuda-cu12.2.0'
            defines: '-DGGML_CUDA=ON -DGGML_MINIMIZE_CODE_SIZE=ON -DGGML_NO_IQUANTS=ON'
            tinyBLAS: 'ON'
          - build: 'cuda-cu12.2.0-full'
            defines: '-DGGML_CUDA=ON'

    steps:
        @@checkout@@
        @@setup_llama_cpp@@
        @@add_licenses@@
        @@set_name@@

        @@setup_vulcan_windows@@
        @@setup_openssl_windows@@
        @@set_cuda_var@@
        @@setup_cuda_windows@@

        @@cpu-cores@@
        @@cmake_build@@

        @@move_files_windows@@
        @@copy_cuda_dlls@@
        @@pack_artifacts_windows@@
        @@upload@@

  windows-hip:
    runs-on: windows-2019

    env:
      CMAKE_COMMON: '-DBUILD_UNDREAMAI_BINARIES=ON -DGGML_HIPBLAS=ON -DAMDGPU_TARGETS="gfx1030,gfx1031,gfx1032,gfx1100,gfx1101,gfx1102" -DGGML_NATIVE=OFF -DLLAMA_SERVER_SSL=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/build/libs'
      PLATFORM: windows
    
    strategy:
      matrix:
        include:
          - build: 'hip'

    steps:
        @@checkout@@
        @@setup_llama_cpp@@
        @@add_licenses@@
        @@set_name@@

        @@set_cuda_var@@
        @@setup_openssl_windows@@
        @@setup_hip_windows@@

        @@cpu-cores@@
        @@cmake_build_hip_windows@@

        @@move_files_windows@@
        @@pack_artifacts_windows@@
        @@upload@@

################################ Android ################################

  android-build:
    runs-on: ubuntu-22.04

    env:
      CMAKE_COMMON: '-DBUILD_UNDREAMAI_BINARIES=OFF -DGGML_NATIVE=OFF -DGGML_OPENMP=OFF'
      VULKAN_VERSION: 1.3.261.1
      PLATFORM: android

    steps:
        @@setup_libs_linux@@

        @@checkout@@
        @@setup_llama_cpp@@
        @@add_licenses@@
        @@set_name@@

        @@set_ndk_var_linux@@
        @@cmake_build_android@@

        @@pack_artifacts_unix@@
        @@upload@@

################################ iOS ################################

  ios-build:
    runs-on: macos-14

    env:
      CMAKE_COMMON: '-DBUILD_UNDREAMAI_BINARIES=OFF -DGGML_METAL_EMBED_LIBRARY=ON -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_DEPLOYMENT_TARGET=14.0 -DCMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM=ggml'
      PLATFORM: ios

    steps:
        @@setup_libs_macos@@

        @@checkout@@
        @@setup_llama_cpp@@
        @@add_licenses@@
        @@set_name@@

        @@cmake_build@@
        @@link_libraries_ios@@

        @@pack_artifacts_ios@@
        @@upload@@

################################ Release ################################

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - archchecker_linux_build
      - archchecker_windows_build
      - linux-build
      - linux-hip
      - macOS-arm64-build
      - macOS-x64-build
      - windows-build
      - windows-hip
      - android-build
      - ios-build
    steps:
        @@checkout@@
        @@download_artifacts@@
        @@merge_artifacts@@
        @@release@@
