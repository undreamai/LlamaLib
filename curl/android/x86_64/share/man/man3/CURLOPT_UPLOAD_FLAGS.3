.\" generated by cd2nroff 0.1 from CURLOPT_UPLOAD_FLAGS.md
.TH CURLOPT_UPLOAD_FLAGS 3 "2025-06-05" libcurl
.SH NAME
CURLOPT_UPLOAD_FLAGS \- upload flags for IMAP
.SH SYNOPSIS
.nf
#include <curl/curl.h>

CURLcode curl_easy_setopt(CURL *handle, CURLOPT_UPLOAD_FLAGS, long bitmask);
.fi
.SH DESCRIPTION
Pass a long as parameter, which is set to a bitmask, to tell libcurl which
flags to send the server relating to uploaded files. The current supported
flags are \fBCURLULFLAG_ANSWERED\fP, which sets the \fBAnswered\fP flag for IMAP
uploads, \fBCURLULFLAG_DELETED\fP, which sets the \fBDeleted\fP flag for IMAP
uploads, \fBCURLULFLAG_DRAFT\fP, which sets the \fBDraft\fP flag for IMAP uploads,
\fBCURLULFLAG_FLAGGED\fP, which sets the \fBFlagged\fP flag for IMAP uploads, and
\fBCURLULFLAG_SEEN\fP, which sets the \fBSeen\fP flag for IMAP uploads.
.SH DEFAULT
A bitmask with only the \fBCURLULFLAG_SEEN\fP flag set.
.SH PROTOCOLS
This functionality affects imap and imaps
.SH EXAMPLE
.nf
static size_t read_cb(char *ptr, size_t size, size_t nmemb, void *userdata)
{
  FILE *src = userdata;
  /* copy as much data as possible into the 'ptr' buffer, but no more than
     'size' * 'nmemb' bytes */
  size_t retcode = fread(ptr, size, nmemb, src);

  return retcode;
}

int main(void)
{
  CURL *curl = curl_easy_init();
  if(curl) {
    FILE *src = fopen("local-file", "r");
    curl_off_t fsize = 9876; /* set this to the size of the input file */

    /* we want to use our own read function */
    curl_easy_setopt(curl, CURLOPT_READFUNCTION, read_cb);

    /* enable uploading */
    curl_easy_setopt(curl, CURLOPT_UPLOAD, 1L);

    /* specify target */
    curl_easy_setopt(curl, CURLOPT_URL, "imap://example.com:993/mailbox");

    /* provide username */
    curl_easy_setopt(curl, CURLOPT_USERNAME, "user@example.com");

    /* provide password */
    curl_easy_setopt(curl, CURLOPT_PASSWORD, "password");

    /* specify that uploaded mail should be considered flagged */
    curl_easy_setopt(curl, CURLOPT_UPLOAD_FLAGS, CURLULFLAG_FLAGGED);

    /* now specify which pointer to pass to our callback */
    curl_easy_setopt(curl, CURLOPT_READDATA, src);

    /* Set the size of the file to upload */
    curl_easy_setopt(curl, CURLOPT_INFILESIZE_LARGE, (curl_off_t)fsize);

    /* perform the upload */
    curl_easy_perform(curl);
  }
}
.fi
.SH AVAILABILITY
Added in curl 8.13.0
.SH RETURN VALUE
\fIcurl_easy_setopt(3)\fP returns a CURLcode indicating success or error.

CURLE_OK (0) means everything was OK, non\-zero means an error occurred, see
\fIlibcurl\-errors(3)\fP.
.SH SEE ALSO
.BR CURLOPT_UPLOAD (3)
