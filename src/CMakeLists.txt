if(CMAKE_SYSTEM_NAME STREQUAL "iOS" OR CMAKE_SYSTEM_NAME STREQUAL "visionOS")
    set(LIBRARY_TYPE STATIC)
else()
    set(LIBRARY_TYPE SHARED)
endif()
set(LIBRARY_FILES LLM.cpp LLM_client.cpp logging.cpp error_handling.cpp)

# build static library
add_library(${LLAMALIB_STATIC_LIBRARY} LLM_service.cpp ${LIBRARY_FILES})
if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    target_link_options(${LLAMALIB_STATIC_LIBRARY} PRIVATE -Wl,--no-undefined)
endif()
LLAMALIB_COMPILE_DEFS(${LLAMALIB_STATIC_LIBRARY})
target_link_libraries(${LLAMALIB_STATIC_LIBRARY} PRIVATE common)
install(TARGETS ${LLAMALIB_STATIC_LIBRARY} LIBRARY)

# build runtime library
if (LLAMALIB_BUILD_RUNTIME_LIB)
    if(CMAKE_SYSTEM_NAME STREQUAL "Windows" OR CMAKE_SYSTEM_NAME STREQUAL "Linux")
        set(ARCHCHECKER_FILES ${RUNTIME_LIBRARY_FILES} archchecker.cpp)
    endif()

    add_library(${LLAMALIB_RUNTIME_LIBRARY} LLM_runtime.cpp ${LIBRARY_FILES} ${ARCHCHECKER_FILES})
    LLAMALIB_COMPILE_DEFS(${LLAMALIB_RUNTIME_LIBRARY})
    if(CMAKE_SYSTEM_NAME STREQUAL "Windows" OR CMAKE_SYSTEM_NAME STREQUAL "Linux")
        target_link_libraries(${LLAMALIB_RUNTIME_LIBRARY} PRIVATE FeatureDetector)
    endif()
    install(TARGETS ${LLAMALIB_RUNTIME_LIBRARY} LIBRARY)
endif()
