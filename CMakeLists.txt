cmake_minimum_required(VERSION 3.18)

include("${CMAKE_SOURCE_DIR}/cmake/LlamaLibCommon.cmake")
project(LlamaLib VERSION ${LLAMALIB_VERSION} LANGUAGES C CXX)

################################################ OPTIONS ################################################

if(CMAKE_SYSTEM_NAME STREQUAL "Windows" OR CMAKE_SYSTEM_NAME STREQUAL "Linux" OR CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    OPTION(LLAMALIB_BUILD_RUNTIME_LIB "Build LlamaLib runtime library" ON)
    OPTION(LLAMALIB_BUILD_SERVER "Build LlamaLib server" ON)
    OPTION(LLAMALIB_BUILD_TESTS "Build LlamaLib tests" ON)
else()
    SET(LLAMALIB_BUILD_RUNTIME_LIB OFF)
    SET(LLAMALIB_BUILD_SERVER OFF)
    SET(LLAMALIB_BUILD_TESTS OFF)
endif()
set(ARCHITECTURE "" CACHE STRING "Target architecture")
SET(BUILD_SHARED_LIBS OFF)

################################################ SETUP ################################################

# Set CUDA architectures
set(CMAKE_CUDA_ARCHITECTURES "52;61;70;75;86;89")
set(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS} /Zm1000")

# Setup OpenSSL
if (ARCHITECTURE STREQUAL "android_arm64" OR ARCHITECTURE STREQUAL "android_x64" OR ARCHITECTURE STREQUAL "ios" OR ARCHITECTURE STREQUAL "visionos")
    set(OPENSSL_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/openssl/${ARCHITECTURE}/include)
    set(OPENSSL_SSL_LIBRARY ${CMAKE_SOURCE_DIR}/openssl/${ARCHITECTURE}/lib/libssl.a)
    set(OPENSSL_CRYPTO_LIBRARY ${CMAKE_SOURCE_DIR}/openssl/${ARCHITECTURE}/lib/libcrypto.a)
endif()
find_package(OpenSSL REQUIRED)

################################################ BUILD ################################################

set(LLAMA_CPP_ROOT ${CMAKE_SOURCE_DIR}/third_party/llama.cpp)

function(LLAMALIB_COMPILE_DEFS NAME)
    target_compile_features(${NAME} PRIVATE cxx_std_11)
    add_compile_definitions(${NAME} PRIVATE UNDREAMAI_EXPORTS)
    target_include_directories(${NAME} PRIVATE ${LLAMALIB_INCLUDE_DIRS})
    target_compile_definitions(${NAME} PRIVATE CPPHTTPLIB_OPENSSL_SUPPORT)
    target_link_libraries(${NAME} PRIVATE OpenSSL::SSL OpenSSL::Crypto)
endfunction()

if (NOT WIN32)
    set(STATIC_FLAGS "-fPIC")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${STATIC_FLAGS}")
else()
    add_compile_definitions(WIN32_LEAN_AND_MEAN NOMINMAX)
endif()

set(LLAMALIB_STATIC_LIBRARY "llamalib_${ARCHITECTURE}")
string(TOLOWER "${CMAKE_SYSTEM_NAME}" OS)
if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    SET(OS "macos")
endif()
set(LLAMALIB_RUNTIME_LIBRARY "llamalib_${OS}_runtime")


################################################ BUILD DIRS ################################################

add_subdirectory("third_party")
add_subdirectory("src")
add_subdirectory("tools")
if (LLAMALIB_BUILD_TESTS)
    add_subdirectory("tests")
endif()
